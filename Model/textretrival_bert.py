# -*- coding: utf-8 -*-
"""TextRetrival_BERT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GHzfU6KqKP7tWZLtH0MD1pUTzKzpbeXN
"""

!pip install -U datasets huggingface_hub fsspec

from datasets import load_dataset

dataset = load_dataset('ms_marco','v1.1')

subset = dataset['test']
subset

subset['passages'][0]

corpus = []

for sample in subset:
  query_type = sample['query_type']
  if query_type != 'entity':
    continue
  passage_dict = sample['passages']
  passage_text_lst = passage_dict['passage_text']

  corpus+=passage_text_lst
len(corpus)

corpus[0]

import torch
from sentence_transformers import SentenceTransformer

model = SentenceTransformer('all-MiniLM-L6-v2')
corpus_embeddings = model.encode(corpus, convert_to_tensor=True)

corpus_embeddings.shape

from sentence_transformers import util
def similarity(query_embedding, corpus_embeddings):
  return util.cos_sim(query_embedding, corpus_embeddings)[0]

def ranking(query, top_k = 10):
  query_embedding = model.encode(query, convert_to_tensor=True)
  scores = similarity(query_embedding, corpus_embeddings)
  top_results = torch.topk(scores, k=top_k)
  return top_results

query_lst = ['What is the official language in Canada']
top_k = 5

for query in query_lst:
  top_results = ranking(query,top_k)

  print(f'Query: {query}')
  print("\n===========================")
  print(f'Top {top_k} most similar sentences in corpus:\n')

  for idx, (score,doc_idx) in enumerate(zip(top_results[0],top_results[1])):
    print(f'Document rank {idx+1}')
    print(corpus[doc_idx])
    print(f"(Score: {score:.4f})\n")

